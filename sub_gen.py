import tkinter as tk
from tkinter import filedialog, messagebox
import whisper
import os
from tkinter import ttk
import threading
import webbrowser
import sys

class SubtitleApp:
    def __init__(self, root):
        self.root = root
        self.root.title("SubGen")
        self.root.geometry("600x600")
        self.root.resizable(False, False)
        self.root.configure(bg="#2E2E2E")

        # –†–Ø–î–û–ö –î–õ–Ø –Ü–ö–û–ù–ö–ò

        icon_path = None
        if getattr(sys, 'frozen', False):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–æ–≥—Ä–∞–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —è–∫ –∑–∞–ø–∞–∫–æ–≤–∞–Ω–∞
            # –Ø–∫—â–æ –∑–∞–ø–∞–∫–æ–≤–∞–Ω–∞, –±–µ—Ä–µ–º–æ —à–ª—è—Ö –∑ _MEIPASS
            bundle_dir = sys._MEIPASS
        else:
            # –Ø–∫—â–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π .py —Ñ–∞–π–ª, –±–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é —Å–∫—Ä–∏–ø—Ç–∞
            bundle_dir = os.path.dirname(os.path.abspath(__file__))

        # –ë—É–¥—É—î–º–æ –ø–æ–≤–Ω–∏–π —à–ª—è—Ö –¥–æ icon.ico
        icon_path = os.path.join(bundle_dir, 'icon.ico')

        try:
            if icon_path and os.path.exists(icon_path):
                self.root.iconbitmap(icon_path)
            else:
                print(f"–Ü–∫–æ–Ω–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∑–∞ —à–ª—è—Ö–æ–º: {icon_path}")
        except tk.TclError:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –∑ —à–ª—è—Ö—É: {icon_path}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç ICO.")
        except Exception as e:
            print(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ–∫–æ–Ω–∫–∏: {e}")

        self.style = ttk.Style()
        self.style.theme_use('clam')

        # –°—Ç–∏–ª—ñ –¥–ª—è Combobox (–≤–∏–±—ñ—Ä –º–æ–≤–∏)
        self.style.configure("TCombobox",
                             fieldbackground="#424242",
                             background="#505050",
                             foreground="white",
                             font=("Arial", 16),
                             selectbackground="#606060",
                             selectforeground="white",
                             borderwidth=1,
                             relief="solid",
                             padding=5
                             )
        self.style.map("TCombobox",
                       fieldbackground=[('readonly', '#424242')],
                       background=[('readonly', '#505050')],
                       selectbackground=[('readonly', '#606060')])

        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∞—é—á–æ–≥–æ —Å–ø–∏—Å–∫—É –∫–æ–º–±–æ–±–æ–∫—Å—É (ListBox)
        self.style.configure("TCombobox.Popdown.Listbox",
                             background="#505050",
                             foreground="white",
                             selectbackground="#606060",
                             selectforeground="white",
                             font=("Arial", 14),
                             borderwidth=1,
                             relief="solid")

        # –°—Ç–∏–ª—ñ –¥–ª—è –û–°–ù–û–í–ù–ò–• –∫–Ω–æ–ø–æ–∫ (Load, Generate, Save)
        self.style.configure("TButton",
                             background="#3F51B5",
                             foreground="white",
                             font=("Arial", 13, "bold"),
                             borderwidth=3,
                             relief="groove",
                             focusthickness=0,
                             focuscolor='none',
                             padding=[10, 5],
                             width=26
                             )
        self.style.map("TButton",
                       background=[('active', '#303F9F')])

        # –ù–û–í–ò–ô –°–¢–ò–õ–¨ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"
        self.style.configure("About.TButton",
                             background="#757575",
                             foreground="white",
                             font=("Arial", 13, "bold"),
                             borderwidth=2,
                             relief="solid",
                             focusthickness=0,
                             focuscolor='none',
                             padding=[10, 5],
                             width=13
                             )
        self.style.map("About.TButton",
                       background=[('active', '#9E9E9E')])

        # –°—Ç–∏–ª—ñ –¥–ª—è Label (—Å—Ç–∞—Ç—É—Å, —ñ–Ω—à—ñ –Ω–∞–ø–∏—Å–∏)
        self.style.configure("TLabel",
                             background="#2E2E2E",
                             foreground="white",
                             font=("Arial", 12))

        # –°—Ç–∏–ª—ñ –¥–ª—è Progressbar
        self.style.configure("TProgressbar",
                             background="#4CAF50",
                             troughcolor="#424242",
                             thickness=12)

        self.langs = {
            "English": {
                "load_audio": "Load Audio",
                "load_video": "Load Video",
                "generate": "Generate Subtitles",
                "save": "Save Subtitles",
                "about": "About",
                "title": "SubGen",
                "status_ready": "Load audio/video",
                "status_loaded": "Loaded: ",
                "status_loaded_and_prompt": "Loaded: {filename}. Now generate subtitles.",
                "status_transcribing": "Transcribing...",
                "status_generated": "Subtitles generated. Save them to your computer",
                "status_saved": "Subtitles saved.",
                "status_error": "Error during transcription.",
                "warning_no_file": "Please load an audio or video file first.",
                "warning_no_subs": "No subtitles to save.",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –í–Ü–ö–ù–ê "–ü–†–û –ü–†–û–ì–†–ê–ú–£" ---
                "about_text_p1": "SubGen - was created to generate subtitles from video and audio.",
                "about_text_p2": "The program generates subtitles in srt format.",
                "about_developer": "Developer: Oleh Melnytskyi",
                "about_contact": "Contact information: melnitskiy95@gmail.com",
                "about_version": "Program version: 1.0.0",
                "about_telegram_intro": "More programs in the Telegram channel: ",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –î–û–ù–ê–¢–£ ---
                "donate_intro": "üéÅ Want to support our project?",
                "donate_thanks": "We would be grateful for any donation!",
                "donate_paypal_text": "Donate via "
            },
            "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": {
                "load_audio": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—É–¥—ñ–æ",
                "load_video": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–µ–æ",
                "generate": "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä–∏",
                "save": "–ó–±–µ—Ä–µ–≥—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä–∏",
                "about": "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É",
                "title": "SubGen",
                "status_ready": "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∞—É–¥—ñ–æ/–≤—ñ–¥–µ–æ",
                "status_loaded": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ",
                "status_loaded_and_prompt": "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {filename}. –¢–µ–ø–µ—Ä –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ —Å—É–±—Ç–∏—Ç—Ä–∏.",
                "status_transcribing": "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è...",
                "status_generated": "–°—É–±—Ç–∏—Ç—Ä–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ. –ó–±–µ—Ä–µ–∂—ñ—Ç—å —ó—Ö –Ω–∞ –∫–æ–º–ø'—é—Ç–µ—Ä",
                "status_saved": "–°—É–±—Ç–∏—Ç—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
                "status_error": "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è.",
                "warning_no_file": "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∞—É–¥—ñ–æ- –∞–±–æ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª.",
                "warning_no_subs": "–ù–µ–º–∞—î —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –í–Ü–ö–ù–ê "–ü–†–û –ü–†–û–ì–†–ê–ú–£" ---
                "about_text_p1": "SubGen - –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ –∑ –≤—ñ–¥–µ–æ —Ç–∞ –∞—É–¥—ñ–æ.",
                "about_text_p2": "–ü—Ä–æ–≥—Ä–∞–º–∞ –≥–µ–Ω–µ—Ä—É—î —Å—É–±—Ç–∏—Ç—Ä–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ñ srt.",
                "about_developer": "–†–æ–∑—Ä–æ–±–Ω–∏–∫: –û–ª–µ–≥ –ú–µ–ª—å–Ω–∏—Ü—å–∫–∏–π",
                "about_contact": "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: melnitskiy95@gmail.com",
                "about_version": "–í–µ—Ä—Å—ñ—è –ø—Ä–æ–≥—Ä–∞–º–∏: 1.0.0",
                "about_telegram_intro": "–ë—ñ–ª—å—à–µ –ø—Ä–æ–≥—Ä–∞–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ñ: ",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –î–û–ù–ê–¢–£ ---
                "donate_intro": "üéÅ –•–æ—á–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à –ø—Ä–æ—î–∫—Ç?",
                "donate_thanks": "–ë—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ –±—É–¥—å-—è–∫–∏–π –¥–æ–Ω–∞—Ç!",
                "donate_paypal_text": "–ü–µ—Ä–µ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–µ–∑ "
            },
            "Deutsch": {
                "load_audio": "Audio laden",
                "load_video": "Video laden",
                "generate": "Untertitel generieren",
                "save": "Untertitel speichern",
                "about": "√úber",
                "title": "SubGen",
                "status_ready": "Audio/Video laden",
                "status_loaded": "Geladen: ",
                "status_loaded_and_prompt": "Geladen: {filename}. Generieren Sie jetzt Untertitel.",
                "status_transcribing": "Transkription l√§uft...",
                "status_generated": "Untertitel generiert. Speichern Sie sie auf Ihrem Computer",
                "status_saved": "Untertitel gespeichert.",
                "status_error": "Fehler w√§hrend der Transkription.",
                "warning_no_file": "Bitte laden Sie zuerst eine Audio- oder Videodatei.",
                "warning_no_subs": "Keine Untertitel zum Speichern vorhanden.",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –í–Ü–ö–ù–ê "–ü–†–û –ü–†–û–ì–†–ê–ú–£" ---
                "about_text_p1": "SubGen - wurde erstellt, um Untertitel aus Video und Audio zu generieren.",
                "about_text_p2": "Das Programm generiert Untertitel im SRT-Format.",
                "about_developer": "Entwickler: Oleh Melnytskyi",
                "about_contact": "Kontaktinformationen: melnitskiy95@gmail.com",
                "about_version": "Programmversion: 1.0.0",
                "about_telegram_intro": "Weitere Programme im Telegram-Kanal: ",
                # --- –ù–û–í–Ü –ö–õ–Æ–ß–Ü –î–õ–Ø –î–û–ù–ê–¢–£ ---
                "donate_intro": "üéÅ M√∂chten Sie unser Projekt unterst√ºtzen?",
                "donate_thanks": "Wir w√§ren dankbar f√ºr jede Spende!",
                "donate_paypal_text": "Spenden Sie √ºber "
            }
        }

        self.selected_lang = tk.StringVar(value="English")
        self.current_texts = self.langs[self.selected_lang.get()]

        self.file_path = None
        self.subtitles = None
        self.app_state = "ready"

        self.progress_var = tk.DoubleVar()
        self.progressbar = None

        self.model = None
        self.load_whisper_model()

        # –ü–æ—Å—Ç—ñ–π–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –¥–æ–Ω–∞—Ç—É PayPal
        self.paypal_donate_url = "https://www.paypal.com/donate/?hosted_button_id=WWSDL9ZDYZBCS"

        self.create_widgets()

    def load_whisper_model(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥–µ–ª—å Whisper. –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—ñ—Å–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Tk."""
        try:
            self.model = whisper.load_model("small")
        except Exception as e:
            messagebox.showerror("SubGen Error", f"Failed to load Whisper model: {e}\n"
                                                 "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —É –≤–∞—Å —Å—Ç–∞–±—ñ–ª—å–Ω–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è "
                                                 "–∞–±–æ —Ñ–∞–π–ª–∏ –º–æ–¥–µ–ª—ñ –ø—Ä–∏—Å—É—Ç–Ω—ñ.")
            self.model = None

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
        title_label = ttk.Label(self.root, text="SubGen", font=("Arial", 28, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=(30, 20))

        # –ö–æ–º–±–æ–±–æ–∫—Å –≤–∏–±–æ—Ä—É –º–æ–≤–∏
        lang_menu = ttk.Combobox(self.root, textvariable=self.selected_lang, values=list(self.langs.keys()),
                                 state="readonly", style="TCombobox")
        lang_menu.grid(row=1, column=0, columnspan=2, pady=(0, 20), sticky="ew", padx=145)
        lang_menu.bind("<<ComboboxSelected>>", self.update_language)

        # --- –§—Ä–µ–π–º –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏" ---
        load_buttons_frame = ttk.Frame(self.root, style="TLabel")
        load_buttons_frame.grid(row=2, column=0, columnspan=2, pady=(10, 10))

        self.load_audio_btn = ttk.Button(load_buttons_frame, text=self.current_texts["load_audio"],
                                         command=self.load_audio,
                                         style="TButton")
        self.load_audio_btn.grid(row=0, column=0, padx=(0, 5), pady=5)

        self.load_video_btn = ttk.Button(load_buttons_frame, text=self.current_texts["load_video"],
                                         command=self.load_video,
                                         style="TButton")
        self.load_video_btn.grid(row=0, column=1, padx=(5, 0), pady=5)

        # --- –§—Ä–µ–π–º –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ---
        gen_save_buttons_frame = ttk.Frame(self.root, style="TLabel")
        gen_save_buttons_frame.grid(row=3, column=0, columnspan=2, pady=(10, 30))

        self.generate_btn = ttk.Button(gen_save_buttons_frame, text=self.current_texts["generate"],
                                       command=self.start_generation,
                                       style="TButton")
        self.generate_btn.grid(row=0, column=0, padx=(0, 5), pady=5)

        self.save_btn = ttk.Button(gen_save_buttons_frame, text=self.current_texts["save"], command=self.save_srt,
                                   style="TButton")
        self.save_btn.grid(row=0, column=1, padx=(5, 0), pady=5)

        # –ü—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä
        self.progressbar = ttk.Progressbar(self.root, orient="horizontal", length=300, mode="indeterminate",
                                           variable=self.progress_var, style="TProgressbar")
        self.progressbar.grid(row=4, column=0, columnspan=2, pady=10, sticky="ew", padx=100)
        self.progressbar.grid_remove()

        # –°—Ç–∞—Ç—É—Å-–ª–µ–π–±–ª
        self.status_label = ttk.Label(self.root, text=self.current_texts["status_ready"], style="TLabel")
        self.status_label.grid(row=5, column=0, columnspan=2, pady=(10, 0))

        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"
        self.about_btn = ttk.Button(self.root, text=self.current_texts["about"], command=self.show_about,
                                    style="About.TButton")
        self.about_btn.grid(row=6, column=0, columnspan=2, pady=(30, 30))

        # --- –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ì–õ–ê–í–ù–û–ì–û –í–Ü–ö–ù–ê ---
        self.root.grid_columnconfigure(0, weight=1)
        self.root.grid_columnconfigure(1, weight=1)

        self.root.grid_rowconfigure(0, weight=0)
        self.root.grid_rowconfigure(1, weight=0)
        self.root.grid_rowconfigure(2, weight=1)
        self.root.grid_rowconfigure(3, weight=1)
        self.root.grid_rowconfigure(4, weight=0)
        self.root.grid_rowconfigure(5, weight=0)
        self.root.grid_rowconfigure(6, weight=1)
        self.root.grid_rowconfigure(7, weight=1) # –ó–∞–ª–∏—à–µ–Ω–æ –¥–ª—è –≥–Ω—É—á–∫–æ—Å—Ç—ñ –Ω–∏–∂–Ω—å–æ—ó —á–∞—Å—Ç–∏–Ω–∏ –≤—ñ–∫–Ω–∞

        self.update_language()

    def update_language(self, event=None):
        self.current_texts = self.langs[self.selected_lang.get()]

        self.load_audio_btn.config(text=self.current_texts["load_audio"])
        self.load_video_btn.config(text=self.current_texts["load_video"])
        self.generate_btn.config(text=self.current_texts["generate"])
        self.save_btn.config(text=self.current_texts["save"])
        self.about_btn.config(text=self.current_texts["about"])
        self.root.title(self.current_texts["title"])

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É —Ç–∞ –∫–æ–ª—å–æ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ app_state
        current_text = ""
        current_color = "white"

        if self.app_state == "ready":
            current_text = self.current_texts["status_ready"]
            current_color = "white"
        elif self.app_state == "loaded":
            current_text = self.current_texts["status_loaded_and_prompt"].format(filename=os.path.basename(self.file_path))
            current_color = "white"
        elif self.app_state == "transcribing":
            current_text = self.current_texts["status_transcribing"]
            current_color = "white"
        elif self.app_state == "generated":
            current_text = self.current_texts["status_generated"]
            current_color = "#8BC34A"
        elif self.app_state == "saved":
            current_text = self.current_texts["status_saved"]
            current_color = "#2196F3"
        elif self.app_state == "error":
            current_text = self.current_texts["status_error"]
            current_color = "red"

        self.status_label.config(text=current_text, foreground=current_color)


    def load_audio(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("Audio Files", "*.mp3 *.wav *.m4a")])
        if self.file_path:
            self.app_state = "loaded"
            display_text = self.current_texts["status_loaded_and_prompt"].format(filename=os.path.basename(self.file_path))
            self.status_label.config(text=display_text, foreground="white")
            self.progressbar.grid_remove()
            self.progress_var.set(0)
            self.generate_btn.config(state=tk.NORMAL)
            self.save_btn.config(state=tk.DISABLED)
            self.load_audio_btn.config(state=tk.NORMAL)
            self.load_video_btn.config(state=tk.NORMAL)
            self.subtitles = None

    def load_video(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("Video Files", "*.mp4 *.mov *.mkv")])
        if self.file_path:
            self.app_state = "loaded"
            display_text = self.current_texts["status_loaded_and_prompt"].format(filename=os.path.basename(self.file_path))
            self.status_label.config(text=display_text, foreground="white")
            self.progressbar.grid_remove()
            self.progress_var.set(0)
            self.generate_btn.config(state=tk.NORMAL)
            self.save_btn.config(state=tk.DISABLED)
            self.load_audio_btn.config(state=tk.NORMAL)
            self.load_video_btn.config(state=tk.NORMAL)
            self.subtitles = None

    def start_generation(self):
        if not self.file_path:
            messagebox.showwarning(self.current_texts["title"], self.current_texts["warning_no_file"])
            return

        if self.model is None:
            messagebox.showerror(self.current_texts["title"],
                                 "Whisper model not loaded. Please restart the application or check your internet connection.")
            return

        self.generate_btn.config(state=tk.DISABLED)
        self.save_btn.config(state=tk.DISABLED)
        self.load_audio_btn.config(state=tk.DISABLED)
        self.load_video_btn.config(state=tk.DISABLED)

        self.progressbar.grid(row=4, column=0, columnspan=2, pady=10, sticky="ew", padx=100)
        self.progressbar.start()

        self.app_state = "transcribing"
        self.status_label.config(text=self.current_texts["status_transcribing"], foreground="white")

        threading.Thread(target=self.generate_subtitles).start()

    def generate_subtitles(self):
        try:
            result = self.model.transcribe(self.file_path)
            self.subtitles = result["segments"]
            self.app_state = "generated"
            self.status_label.config(text=self.current_texts["status_generated"],
                                     foreground="#8BC34A")

        except Exception as e:
            self.app_state = "error"
            self.status_label.config(text=self.current_texts["status_error"],
                                     foreground="red")
            messagebox.showerror(self.current_texts["title"], str(e))
            self.subtitles = None
        finally:
            self.progressbar.stop()
            self.progressbar.grid_remove()
            self.generate_btn.config(state=tk.NORMAL)
            self.load_audio_btn.config(state=tk.NORMAL)
            self.load_video_btn.config(state=tk.NORMAL)
            if self.subtitles:
                self.save_btn.config(state=tk.NORMAL)
            else:
                self.save_btn.config(state=tk.DISABLED)

    def save_srt(self):
        if not self.subtitles:
            messagebox.showwarning(self.current_texts["title"], self.current_texts["warning_no_subs"])
            return
        path = filedialog.asksaveasfilename(defaultextension=".srt", filetypes=[("SRT files", "*.srt")])
        if path:
            self.app_state = "saved"
            with open(path, "w", encoding="utf-8") as f:
                for i, seg in enumerate(self.subtitles):
                    f.write(
                        f"{i + 1}\n{self.format_time(seg['start'])} --> {self.format_time(seg['end'])}\n{seg['text'].strip()}\n\n")
            self.status_label.config(text=self.current_texts["status_saved"],
                                     foreground="#2196F3")

    def format_time(self, seconds):
        hrs = int(seconds // 3600)
        mins = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        msecs = int((seconds - int(seconds)) * 1000)
        return f"{hrs:02}:{mins:02}:{secs:02},{msecs:03}"

    def show_about(self):
        self.create_about_window()

    def create_about_window(self):
        about_window = tk.Toplevel(self.root)
        about_window.title(self.current_texts["about"])
        # –ó–±—ñ–ª—å—à–∏–º–æ —Ä–æ–∑–º—ñ—Ä –≤—ñ–∫–Ω–∞, —â–æ–± –≤–º—ñ—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç
        about_window.geometry("400x375")
        about_window.resizable(False, False)
        about_window.transient(self.root)
        about_window.grab_set()
        about_window.protocol("WM_DELETE_WINDOW", about_window.destroy)

        about_window.configure(bg="#2E2E2E")

        text_widget = tk.Text(about_window, wrap=tk.WORD, bg="#2E2E2E", fg="white",
                              font=("Arial", 11), padx=20, pady=20, borderwidth=0, relief="flat")
        text_widget.pack(expand=True, fill="both")

        # –Ü—Å–Ω—É—é—á–∏–π —Ç–µ–∫—Å—Ç "–ü—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—É"
        about_text_content = (
            self.current_texts["about_text_p1"] + "\n\n" +
            self.current_texts["about_text_p2"] + "\n\n" +
            self.current_texts["about_developer"] + "\n" +
            self.current_texts["about_contact"] + "\n" +
            self.current_texts["about_version"] + "\n"
        )
        telegram_link_intro = self.current_texts["about_telegram_intro"]
        telegram_link_text = "t.me/mlntsksoft"
        telegram_channel_name = "Mlntsk Soft" # –¢–µ–∫—Å—Ç, —â–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è –¥–ª—è Telegram –ø–æ—Å–∏–ª–∞–Ω–Ω—è

        text_widget.insert(tk.END, about_text_content)
        text_widget.insert(tk.END, "\n" + telegram_link_intro)

        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram
        link_label = tk.Label(text_widget, text=telegram_channel_name,
                              fg="#2196F3", cursor="hand2", font=("Arial", 11, "underline"),
                              bg="#2E2E2E")

        link_label.bind("<Button-1>", lambda e: self.open_link(telegram_link_text))

        text_widget.window_create(tk.END, window=link_label, stretch=True)

        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑–¥—ñ–ª—å–Ω–∏–∫ –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ –ø–µ—Ä–µ–¥ —Å–µ–∫—Ü—ñ—î—é –¥–æ–Ω–∞—Ç—É
        text_widget.insert(tk.END, "\n\n" + "-"*40 + "\n\n")

        # –ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–Ω–∞—Ç—É
        text_widget.insert(tk.END, self.current_texts["donate_intro"] + "\n\n")
        text_widget.insert(tk.END, self.current_texts["donate_thanks"] + "\n\n")
        text_widget.insert(tk.END, self.current_texts["donate_paypal_text"] + " ")

        # –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ PayPal
        paypal_link_label = tk.Label(text_widget, text="PayPal", # –¢–µ–∫—Å—Ç, —è–∫–∏–π –±—É–¥–µ –∫–ª—ñ–∫–∞–±–µ–ª—å–Ω–∏–º
                                     fg="#2196F3", cursor="hand2", font=("Arial", 11, "underline"),
                                     bg="#2E2E2E")
        paypal_link_label.bind("<Button-1>", lambda e: self.open_link(self.paypal_donate_url))
        text_widget.window_create(tk.END, window=paypal_link_label, stretch=True)


        text_widget.config(state=tk.DISABLED) # –†–æ–±–∏–º–æ Text –≤—ñ–¥–∂–µ—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è

    def open_link(self, url):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è —É –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä—ñ."""
        try:

            if not url.startswith("http://") and not url.startswith("https://"):
                url = "https://" + url
            webbrowser.open_new_tab(url)
        except Exception as e:
            messagebox.showerror("Error", f"Could not open link: {e}\nPlease check your browser installation.")


if __name__ == "__main__":
    root = tk.Tk()
    app = SubtitleApp(root)
    root.mainloop()